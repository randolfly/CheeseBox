{
  "uid" : "5288555b34568ae0",
  "name" : "test_node_delete",
  "fullName" : "test_node.TestNode#test_node_delete",
  "historyId" : "cb477ee169c6f1d5abb4176cc9a577ff",
  "time" : {
    "start" : 1608293909567,
    "stop" : 1608293909597,
    "duration" : 30
  },
  "status" : "broken",
  "statusMessage" : "TypeError: 'Node' object is not iterable",
  "statusTrace" : "self = <test_node.TestNode object at 0x7f64c45f0460>\n\n    @allure.story('测试删除子节点功能')\n    def test_node_delete(self):\n        root_node = init_node('hello')\n        test_list = [init_node(x) for x in ['胖嘟嘟', '老干妈', '123',\n                                   '12', '1', '张荣侨', '张荣Randolf', '配方法','sin']]\n        for item in test_list:\n            root_node.add_child(item)\n    \n>       delete_child(root_node, Node('张荣侨'))\n\ntest_node.py:81: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntest_node.py:45: in delete_child\n    return node.delete_child(file_name)\n../util/node.py:121: in delete_child\n    pos = self.binary_search(file_name)\n../util/node.py:86: in binary_search\n    node_pinyin = self.string_helper.get_string_pinyin(file_name)\n../util/string_helper.py:59: in get_string_pinyin\n    return ''.join(lazy_pinyin(string))\n/home/randolf/.local/lib/python3.8/site-packages/pypinyin/core.py:352: in lazy_pinyin\n    return _pinyin.lazy_pinyin(\n/home/randolf/.local/lib/python3.8/site-packages/pypinyin/core.py:120: in lazy_pinyin\n    *self.pinyin(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pypinyin.core.Pinyin object at 0x7f64c45fe4f0>, hans = <node.Node object at 0x7f64c45f0160>, style = <Style.NORMAL: 0>, heteronym = False, errors = 'default', strict = True\nkwargs = {}\n\n    def pinyin(self, hans, style=Style.TONE, heteronym=False,\n               errors='default', strict=True, **kwargs):\n        \"\"\"将汉字转换为拼音，返回汉字的拼音列表。\n    \n        :param hans: 汉字字符串( ``'你好吗'`` )或列表( ``['你好', '吗']`` ).\n                     可以使用自己喜爱的分词模块对字符串进行分词处理,\n                     只需将经过分词处理的字符串列表传进来就可以了。\n        :type hans: unicode 字符串或字符串列表\n        :param style: 指定拼音风格，默认是 :py:attr:`~pypinyin.Style.TONE` 风格。\n                      更多拼音风格详见 :class:`~pypinyin.Style`\n        :param errors: 指定如何处理没有拼音的字符。详见 :ref:`handle_no_pinyin`\n    \n                       * ``'default'``: 保留原始字符\n                       * ``'ignore'``: 忽略该字符\n                       * ``'replace'``: 替换为去掉 ``\\\\u`` 的 unicode 编码字符串\n                         (``'\\\\u90aa'`` => ``'90aa'``)\n                       * callable 对象: 回调函数之类的可调用对象。\n    \n        :param heteronym: 是否启用多音字\n        :param strict: 是否严格遵照《汉语拼音方案》来处理声母和韵母，\n                       详见 :ref:`strict`\n        :return: 拼音列表\n        :rtype: list\n    \n        \"\"\"\n        # 对字符串进行分词处理\n        if isinstance(hans, text_type):\n            han_list = self.seg(hans)\n        else:\n>           han_list = chain(*(self.seg(x) for x in hans))\nE           TypeError: 'Node' object is not iterable\n\n/home/randolf/.local/lib/python3.8/site-packages/pypinyin/core.py:90: TypeError",
  "flaky" : false,
  "beforeStages" : [ ],
  "testStage" : {
    "status" : "broken",
    "statusMessage" : "TypeError: 'Node' object is not iterable",
    "statusTrace" : "self = <test_node.TestNode object at 0x7f64c45f0460>\n\n    @allure.story('测试删除子节点功能')\n    def test_node_delete(self):\n        root_node = init_node('hello')\n        test_list = [init_node(x) for x in ['胖嘟嘟', '老干妈', '123',\n                                   '12', '1', '张荣侨', '张荣Randolf', '配方法','sin']]\n        for item in test_list:\n            root_node.add_child(item)\n    \n>       delete_child(root_node, Node('张荣侨'))\n\ntest_node.py:81: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ntest_node.py:45: in delete_child\n    return node.delete_child(file_name)\n../util/node.py:121: in delete_child\n    pos = self.binary_search(file_name)\n../util/node.py:86: in binary_search\n    node_pinyin = self.string_helper.get_string_pinyin(file_name)\n../util/string_helper.py:59: in get_string_pinyin\n    return ''.join(lazy_pinyin(string))\n/home/randolf/.local/lib/python3.8/site-packages/pypinyin/core.py:352: in lazy_pinyin\n    return _pinyin.lazy_pinyin(\n/home/randolf/.local/lib/python3.8/site-packages/pypinyin/core.py:120: in lazy_pinyin\n    *self.pinyin(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <pypinyin.core.Pinyin object at 0x7f64c45fe4f0>, hans = <node.Node object at 0x7f64c45f0160>, style = <Style.NORMAL: 0>, heteronym = False, errors = 'default', strict = True\nkwargs = {}\n\n    def pinyin(self, hans, style=Style.TONE, heteronym=False,\n               errors='default', strict=True, **kwargs):\n        \"\"\"将汉字转换为拼音，返回汉字的拼音列表。\n    \n        :param hans: 汉字字符串( ``'你好吗'`` )或列表( ``['你好', '吗']`` ).\n                     可以使用自己喜爱的分词模块对字符串进行分词处理,\n                     只需将经过分词处理的字符串列表传进来就可以了。\n        :type hans: unicode 字符串或字符串列表\n        :param style: 指定拼音风格，默认是 :py:attr:`~pypinyin.Style.TONE` 风格。\n                      更多拼音风格详见 :class:`~pypinyin.Style`\n        :param errors: 指定如何处理没有拼音的字符。详见 :ref:`handle_no_pinyin`\n    \n                       * ``'default'``: 保留原始字符\n                       * ``'ignore'``: 忽略该字符\n                       * ``'replace'``: 替换为去掉 ``\\\\u`` 的 unicode 编码字符串\n                         (``'\\\\u90aa'`` => ``'90aa'``)\n                       * callable 对象: 回调函数之类的可调用对象。\n    \n        :param heteronym: 是否启用多音字\n        :param strict: 是否严格遵照《汉语拼音方案》来处理声母和韵母，\n                       详见 :ref:`strict`\n        :return: 拼音列表\n        :rtype: list\n    \n        \"\"\"\n        # 对字符串进行分词处理\n        if isinstance(hans, text_type):\n            han_list = self.seg(hans)\n        else:\n>           han_list = chain(*(self.seg(x) for x in hans))\nE           TypeError: 'Node' object is not iterable\n\n/home/randolf/.local/lib/python3.8/site-packages/pypinyin/core.py:90: TypeError",
    "steps" : [ {
      "name" : "初始化Node",
      "time" : {
        "start" : 1608293909568,
        "stop" : 1608293909568,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ {
        "name" : "file_name",
        "value" : "'hello'"
      } ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : true
    }, {
      "name" : "初始化Node",
      "time" : {
        "start" : 1608293909568,
        "stop" : 1608293909568,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ {
        "name" : "file_name",
        "value" : "'胖嘟嘟'"
      } ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : true
    }, {
      "name" : "初始化Node",
      "time" : {
        "start" : 1608293909568,
        "stop" : 1608293909568,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ {
        "name" : "file_name",
        "value" : "'老干妈'"
      } ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : true
    }, {
      "name" : "初始化Node",
      "time" : {
        "start" : 1608293909568,
        "stop" : 1608293909568,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ {
        "name" : "file_name",
        "value" : "'123'"
      } ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : true
    }, {
      "name" : "初始化Node",
      "time" : {
        "start" : 1608293909568,
        "stop" : 1608293909568,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ {
        "name" : "file_name",
        "value" : "'12'"
      } ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : true
    }, {
      "name" : "初始化Node",
      "time" : {
        "start" : 1608293909568,
        "stop" : 1608293909568,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ {
        "name" : "file_name",
        "value" : "'1'"
      } ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : true
    }, {
      "name" : "初始化Node",
      "time" : {
        "start" : 1608293909568,
        "stop" : 1608293909568,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ {
        "name" : "file_name",
        "value" : "'张荣侨'"
      } ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : true
    }, {
      "name" : "初始化Node",
      "time" : {
        "start" : 1608293909568,
        "stop" : 1608293909568,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ {
        "name" : "file_name",
        "value" : "'张荣Randolf'"
      } ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : true
    }, {
      "name" : "初始化Node",
      "time" : {
        "start" : 1608293909568,
        "stop" : 1608293909568,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ {
        "name" : "file_name",
        "value" : "'配方法'"
      } ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : true
    }, {
      "name" : "初始化Node",
      "time" : {
        "start" : 1608293909568,
        "stop" : 1608293909568,
        "duration" : 0
      },
      "status" : "passed",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ {
        "name" : "file_name",
        "value" : "'sin'"
      } ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : false,
      "hasContent" : true
    }, {
      "name" : "删除一个孩子",
      "time" : {
        "start" : 1608293909570,
        "stop" : 1608293909570,
        "duration" : 0
      },
      "status" : "broken",
      "statusMessage" : "TypeError: 'Node' object is not iterable\n",
      "statusTrace" : "  File \"/home/randolf/.local/lib/python3.8/site-packages/allure_commons/_allure.py\", line 169, in impl\n    return func(*a, **kw)\n  File \"/home/randolf/Documents/Code/Python/Project/CheeseBox/src/test/test_node.py\", line 45, in delete_child\n    return node.delete_child(file_name)\n  File \"/home/randolf/Documents/Code/Python/Project/CheeseBox/src/util/node.py\", line 121, in delete_child\n    pos = self.binary_search(file_name)\n  File \"/home/randolf/Documents/Code/Python/Project/CheeseBox/src/util/node.py\", line 86, in binary_search\n    node_pinyin = self.string_helper.get_string_pinyin(file_name)\n  File \"/home/randolf/Documents/Code/Python/Project/CheeseBox/src/util/string_helper.py\", line 59, in get_string_pinyin\n    return ''.join(lazy_pinyin(string))\n  File \"/home/randolf/.local/lib/python3.8/site-packages/pypinyin/core.py\", line 352, in lazy_pinyin\n    return _pinyin.lazy_pinyin(\n  File \"/home/randolf/.local/lib/python3.8/site-packages/pypinyin/core.py\", line 120, in lazy_pinyin\n    *self.pinyin(\n  File \"/home/randolf/.local/lib/python3.8/site-packages/pypinyin/core.py\", line 90, in pinyin\n    han_list = chain(*(self.seg(x) for x in hans))\n",
      "steps" : [ ],
      "attachments" : [ ],
      "parameters" : [ {
        "name" : "node",
        "value" : "<node.Node object at 0x7f64c45f0610>"
      }, {
        "name" : "file_name",
        "value" : "<node.Node object at 0x7f64c45f0160>"
      } ],
      "stepsCount" : 0,
      "attachmentsCount" : 0,
      "shouldDisplayMessage" : true,
      "hasContent" : true
    } ],
    "attachments" : [ ],
    "parameters" : [ ],
    "stepsCount" : 11,
    "attachmentsCount" : 0,
    "shouldDisplayMessage" : true,
    "hasContent" : true
  },
  "afterStages" : [ ],
  "labels" : [ {
    "name" : "feature",
    "value" : "测试Node节点的功能"
  }, {
    "name" : "story",
    "value" : "测试删除子节点功能"
  }, {
    "name" : "suite",
    "value" : "test_node"
  }, {
    "name" : "subSuite",
    "value" : "TestNode"
  }, {
    "name" : "host",
    "value" : "Randolf"
  }, {
    "name" : "thread",
    "value" : "7976-MainThread"
  }, {
    "name" : "framework",
    "value" : "pytest"
  }, {
    "name" : "language",
    "value" : "cpython3"
  }, {
    "name" : "package",
    "value" : "test_node"
  }, {
    "name" : "resultFormat",
    "value" : "allure2"
  } ],
  "parameters" : [ ],
  "links" : [ ],
  "hidden" : true,
  "retry" : true,
  "extra" : {
    "categories" : [ ],
    "tags" : [ ]
  },
  "source" : "5288555b34568ae0.json",
  "parameterValues" : [ ]
}